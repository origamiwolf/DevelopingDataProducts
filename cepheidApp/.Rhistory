128*2
256*2
512*2
phone <- data.frame("year","mb")
View(phone)
rm(phone)
year <- c(2008,2010,2012,2014)
mem <- c(128, 128*2, 128*2*2, 128*2*2*2)
plot(year, mem)
460/23
traftype <- c("Tweet","Instagram","Skype","Google Search","Youtube","Emails")
trafsize <- c(9572,2324,1801,49599,103826,2408870)
traffic <- data.frame(traftype,trafsize)
View(traffic)
plot(traftype)
plot(traffic)
Emails
traffic(Emails)
traffic[Emails]
traffic[traftype="Emails"]
traffic[1]
traffic[1,1
]
traffic[6,1]
2408870/100
=128*128
128*128
2408870/128
2408870/12800
2408870/13000
2408870/26000
2408870/26000
2408870/100
24088/130
103826/120
103826/12000
103826/10000
103826/100
1038.26/100
1038.26/80
1038.26/50
1038.26/40
1038.26/36
1038.26/38
1038.26/32
49599/100
495/50
495/25
495/22
18/10
18/4
2324/100
23.24/4
23.24/5
9572/100
95/10
2408870/2
1204435/185
65*37.5
22.5/56.1
32*32
?sin()
plot(y~sin(x))
y <- sin(x)
plot(y)
plot(sin)
?plot
plot(sin,-2*pi, 2*pi)
clear
plot(cos,-2*pi,2*pi)
plot(tan,-2*pi,2*pi)
library(datasets)
?datasets
library(help="datasets")
?CO2
CO2
pairs(CO@)
pairs(CO2)
?Orange
pairs(Orange)
?Titanic
pairs(Titanic)
?UCBAdmissions
?WWWusage
?warpbreaks
pairs(warpbreaks)
?rock
?mtcars
?morley
plot(run, dataset=morley)
plot(Run,dataset=morley)
plot(morley$run)
plot(morley$run,morley$Speed)
pairs(morley)
?islands
?esoph
?chickwts
?cars
plot(cars$speed,cars$dis)
plot(cars$speed,cars$dist)
WWWusage
?Orange
?HairEyeColor
?AirPassengers
?BOD
?InsectSprays
?UCBAdmissions
?UKDriverDeaths
?ability.cov
?austres
?beavers
beaver1
beaver1
pairs(beaver1)
?sleep
?treering
?uspop
?mtcars
?rivers
rivers
?precip
pairs(mtcars)
pairs(mpg~. data=mtcar)
pairs(mpg~. data=mtcars)
pairs(mpg~., data=mtcars)
exit
quit
plot(sin,0,2*pi)
plot(sin,0,4*pi)
plot(x*sin,0,4*pi)
plot(cos*sin,0,4*pi)
plot(exp,0,1)
plot(exp,0,100)
plot(rdist,0,100)
?rnorm
plot(rnorm(100))
plot(dnorm(100))
?rnorm
plot(pnorm)
plot(pnorm(2))
plot(pnorm)
?pnorm
?rnorm
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(100000))
?plot
methods(lpot)
methods(plot)
?plot.formula
plot.formula(y ~ sin(x),0,2*pi)
plot(y ~ sin(x),0,2*pi)
plot(sin, 0,2*pi)
plot(cos, 0,2*pi)
plot(tan, 0,20*pi)
?mtcars
mtcars
pairs(mtcars)
exit()
quit()
download.packages("caret")
install.packages("caret")
q()
install.packages("e1074")
library("caret")
library(kernlab)
library("kernlab")
install.packages("kernlab")
library("kernlab")
data(spam)
summary(spam)
install.packages("installr")
updateR
library(installr)
updateR
updateR()
q()
install.packages(c("lme4", "manipulate", "mime", "R6", "randomForest", "Rcpp", "RcppEigen", "rmarkdown", "scales", "stringi"))
install.packages("devTools")
install.packages("devtools")
install.packages("tidyr")
install.packages("shiny")
install.packages("slidify")
install.packages("rCharts")
install_github("slidify", "ramnathv")
library(devtools)
install.packages("Rtools")
install.packages("rtools")
install_github("slidify", "ramnathv")
install_github("rcharts", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("googleVis")
install.packages("shinyapps")
install_github("rstudio/shinyapps")
q()
setwd("dataScience9/DevelopingDataProducts//cepheidApp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?numericInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
shiny::runApp()
shiny::runApp()
?textOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
rawCeph <- read.csv("cepheids.csv")
cleanCeph <- gather(rawCeph,magVal,appMag,Min:Max)
processCephData(cleanCeph,200)
data1<-processCephData(cleanCeph,200)
fitCephData(data1)
shiny::runApp()
mf<-fitCephData(data1)
mf[1]
mf[1]$coef
mf[[1]]
mf[[1]]$coef
shiny::runApp()
?predit
?predict
predict(mf[1],newdata=data.frame("Period"=1))
predict(mf[1],Period=2)
predict(mf[[1]],Period=2)
?predict
mf1
mf
mf[1]
class(mf[1])
class(mf[2])
class(mf[[1]])
predict(mf[[1]],Period="2")
predict(mf[[1]],df=data.frame("Period"=c(1)))
predict(mf[[1]],df=data.frame("Period"=c(1)))
predict(mf[[1]],df=data.frame("Period"=c(1,2)))
predict(mf[[2]],df=data.frame("Period"=c(2)))
predict(mf[[6]],df=data.frame("Period"=c(2)))
mf1
mf
mf[[1]]
model1<-mf[[1]]
predict(model1,data.frame(Period=c(1)))
predict(model1,data.frame("Period"=c(1)))
predict(model1,df=data.frame("Period"=c(1)))
predict(model1,newdata=data.frame("Period"=c(1)))
predict(mf[[1]],newdata=data.frame("Period"=c(1)))
predict(mf[[1]],newdata=data.frame(Period=c(1)))
newdat<-data.frame(Period=c(2,4,6))
View(newdat)
predict(mf[[1]],newdata=newdat)
newdat<-data.frame(Period=c(2.0,4.0,6.0))
View(newdat)
predict(mf[[1]],newdata=newdat)
predict(mf[1],newdata=newdat)
length(mf)
predict(mf[[1]],newdata=newdat)
View(cleanCeph)
mf<-lm(log10(Period)~appMag,cleanCeph[cleanCeph$magVal=="Min",])
mf
predict(mf,newdata=newdat)
predict(mf,newdata=1)
predict(mf)
nd<-data.frame(Period=c(1.0))
nd
predict(mf,newdata=nd)
nd<-data.frame(appMag=c(1.0))
predict(mf,newdata=nd)
fitCephData(data1)
mf<-fitCephData(data1)
mf
predict(mf[[1]],data.frame("Period"=c(1)))
fitCephData <- function(cephData) {
fitMax <- lm(absMag~log10(Period),data=cephData[cephData$magVal=="Max",])
fitMin <- lm(absMag~log10(Period),data=cephData[cephData$magVal=="Min",])
return (list(fitMax,fitMin))
}
mf<-fitCephData(data1)
predict(mf[[1]],data.frame("Period"=c(1)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?is.NA
?isNA
?anyNA
shiny::runApp()
shiny::runApp()
shiny::runApp()
?isinf
?isInf
?is.na
?Inf
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?paste
?round
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?is.null
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
